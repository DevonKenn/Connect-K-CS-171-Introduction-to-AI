#Author: Toluwanimi Salako
from collections import defaultdict
import random
import sys
#sys.path.append(r'\ConnectKSource_python')
import board_model as boardmodel

team_name = "DKK" #TODO change me

class StudentAI():
	def oppositePlayer(self,player):
		if(player==1):
			return 2
		return 1

	def copyTwoDList(self,list):
		newL = []
		for i in range(width):
			for j in range(height):
				newL[i][j] = list[i][j]

	def availableMoves(self,model):
		width = model.get_width()
		height = model.get_height()
		spaces = defaultdict(int)
		for i in range(width):

			for j in range(height):
				spaces[(i,j)] = model.get_space(i, j)
				if(model.gravity and model.get_space(i,j) ==0):
					break
		moves = [k for k in spaces.keys() if spaces[k] == 0]
		return moves

	def apply(self,model, move,player):
		#clone = model.clone()
		#model.pieces[move[0]][move[1]] = player
		#print(model)
		return model.place_piece(move,player)

	def maxV(self,model,depth,alpha,beta,best =[],prior_moves = []):
		if(depth <=0 or model.winner()!=-1):
		#if(depth <=0 or model.winner()):
			return self.heuristic(model,depth),prior_moves
		val = float("-inf");
		best_move = []
		moves = self.availableMoves(model)
		if(len(best)>0):
			new_moves = list(prior_moves)
			new_moves.append(best[0])
			val2,best_move = self.minV(self.apply(model,best[0],self.player),(depth-1),alpha,beta,best[1:],new_moves)
			val = max(val,val2)
			if(val>=beta):
				return alpha,best
			alpha = max(alpha,val)
			best_move = best[0]
			moves.remove(best_move)
			new_moves = []
		best = []
		for move in moves:
			new_moves = list(prior_moves)
			new_moves.append(move)
			val2,best_moves  = self.minV(self.apply(model,move,self.player),(depth-1),alpha,beta,[],new_moves)
			if(val2>val):
				val = val2
				best_move = best_moves
			if(val>=beta):
				return val,best_moves
			alpha = max(alpha,val)


		return val,best_move

	def minV(self,model,depth,alpha,beta,best =[], prior_moves = []):
		
		if(depth <=0 or model.winner()==-1):
		#if(depth <=0 or model.winner()):
			return self.heuristic(model,depth),prior_moves
		val = float("inf")
		moves = self.availableMoves(model)
		best_move = []

		if(len(best)>0):
			new_moves = list(prior_moves)
			new_moves.append(best[0])
			val2,best_move =  self.maxV(self.apply(model,best[0],self.oppositePlayer(self.player)),(depth-1),alpha,beta,best[1:],new_moves)
			val = min(val,val2)
			if(val<=alpha):
				return val,best
			beta = min(beta,val)
			best_move = best[0]
			
			moves.remove(best_move)
			new_moves = []


		for move in moves:
			new_moves = list(prior_moves)
			new_moves.append(move)
			val2,best_moves = self.maxV(self.apply(model,move,self.oppositePlayer(self.player)),(depth-1),alpha,beta,[],new_moves)
			if(val2<val):
				val = val2
				best_move = best_moves
			if(val<=alpha):
				return val,best_moves	
			beta = min(beta,val)
 	
		return val,best_move

	def checkRight(self,model,move,player):
		x,y = move
		count =0
		if(x-1<0 or model.pieces[x-1][y] != player):
			count =1
			while(x+count < model.width and model.pieces[x][y] == model.pieces[x+count][y]):
				count+=1
				if(count==model.k_length):
					count+=1000
		if(x+count+1<model.width and model.pieces[x+count][y] ==0 and model.pieces[x][y] ==model.pieces[x+count+1][y]):
			count += checkRight(model,(x+count+1,y), player)
		return count*count

	def checkDiagUpRight(self,model,move,player):
		x,y = move
		count =0
		if(x-1<0 or y-1<0 or model.pieces[x-1][y-1] != player):
			count =1
			while(x+count < model.width and y+count<model.height and model.pieces[x][y] == model.pieces[x+count][y+count]):
				count+=1
				if(count==model.k_length):
					count+=1000
		if(x+count+1<model.width and y+count+1<model.height and model.pieces[x+count][y+count] ==0 and model.pieces[x][y] ==model.pieces[x+count+1][y+count+1]):
			count += checkDiagUpRight(model,(x+count+1,y+count+1), player)

		return count*count

	def checkDiagDownRight(self,model,move,player):
		x,y = move
		count =0
		if(x-1<0 or y+1>=model.height or model.pieces[x-1][y+1] != player):
			count =1
			while(x+count < model.width and y-count >=0 and model.pieces[x][y] == model.pieces[x+count][y-count]):
				count+=1
				if(count==model.k_length):
					count+=1000
		if(x+count+1<model.width and y-count-1>=0 and model.pieces[x+count][y-count] ==0 and model.pieces[x][y] ==model.pieces[x+count+1][y-count-1]):
			count += checkDiagDownRight(model,(x+count+1,y-count-1), player)

		return count*count
	
	def checkUp(self,model,move,player):
		x,y = move
		count =0
		if(y-1<0 or  model.pieces[x][y-1] != player):
			count =1
			while(y+count < model.height and model.pieces[x][y] == model.pieces[x][y+count]):
				count+=1
				if(count==model.k_length):
					count+=1000
		if(y+count+1<model.height and model.pieces[x][y+count] ==0 and model.pieces[x][y] ==model.pieces[x][y+count+1]):
			count += checkUp(model,(x,y+count+1), player)

		return count*count



	def heuristic(self,model,depth):
		width = model.get_width()
		height = model.get_height()
		total =0
		enemyTotal =0
		spaces = defaultdict(int)
		moves = []
		enemyMoves = []
		for i in range(width):
			for j in reversed(range(height)):
				if(model.get_space(i,j)==self.player):#NEW
					moves.append((i,j))#NEW
				elif(model.get_space(i,j)==self.oppositePlayer(self.player)):
					enemyMoves.append((i,j))
				#spaces[(i,j)] = model.get_space(i, j)
				#if(model.gravity):
				#	break
		#moves = [k for k in spaces.keys() if spaces[k] == self.player]
		#enemyMoves = [k for k in spaces.keys() if spaces[k] == self.oppositePlayer(self.player)]
		#print(model)
		for move in moves:
			total = total + self.checkUp(model,move,self.player) + self.checkDiagDownRight(model,move,self.player) + self.checkDiagUpRight(model,move,self.player) + self.checkRight(model,move,self.player)
		for move in enemyMoves:
			enemyTotal = enemyTotal + self.checkUp(model,move,self.oppositePlayer(self.player)) + self.checkDiagDownRight(model,move,self.oppositePlayer(self.player)) + self.checkDiagUpRight(model,move,self.oppositePlayer(self.player)) + self.checkRight(model,move,self.oppositePlayer(self.player))
		#print(total-enemyTotal)
		return total - enemyTotal #- depth

	def miniMax(self,model,depth):
		maxValue = None
		maxMove = None
		moves = self.availableMoves(model)
		best = []
		alpha = float("inf")
		for i in range(1,depth+1):
			if(best):
				v,best2=self.minV(self.apply(model,move,self.player),i,float("-inf"),float("inf"),best[1:],[])
				if(maxValue==None or v>maxValue):
					maxValue = v
					best = best2
					maxMove = best[0]
				best_move = best[0]
				moves.remove(best_move)

			for move in moves:
				v,best2=self.minV(self.apply(model,move,self.player),i,float("-inf"),float("inf"))
				if(maxValue==None or v>maxValue):
					maxValue = v
					best = best2
					maxMove = move
			moves = self.availableMoves(model)
		
		assert maxValue!=None

		return maxMove
	
	def make_move(self,model, deadline):
		'''Write AI Here. Return a tuple (col, row)'''

		return self.miniMax(self.model,4)

	def __init__(self, player, state):
		self.last_move = state.get_last_move()
		self.model = state
		self.player = player


'''===================================
DO NOT MODIFY ANYTHING BELOW THIS LINE
==================================='''

is_first_player = False
deadline = 0
model = None
def make_ai_shell_from_input():
	'''
	Reads board state from input and returns the move chosen by StudentAI
	DO NOT MODIFY THIS
	'''
	global is_first_player
	global model
	global deadline
	ai_shell = None
	begin =  "makeMoveWithState:"
	end = "end"

	go = True
	while (go):
		mass_input = input().split(" ")
		if (mass_input[0] == end):
			sys.exit()
		elif (mass_input[0] == begin):
			#first I want the gravity, then number of cols, then number of rows, then the col of the last move, then the row of the last move then the values for all the spaces.
			# 0 for no gravity, 1 for gravity
			#then rows
			#then cols
			#then lastMove col
			#then lastMove row.
			#then deadline.
			#add the K variable after deadline.
			#then the values for the spaces.
			#cout<<"beginning"<<endl;
			gravity = int(mass_input[1])
			col_count = int(mass_input[2])
			row_count = int(mass_input[3])
			last_move_col = int(mass_input[4])
			last_move_row = int(mass_input[5])

			#add the deadline here:
			deadline = -1
			deadline = int(mass_input[6])
			k = int(mass_input[7])
			#now the values for each space.


			counter = 8
			#allocate 2D array.
			model = boardmodel.BoardModel(col_count, row_count, k, gravity)
			count_own_moves = 0

			for col in range(col_count):
				for row in range(row_count):
					model.pieces[col][row] = int(mass_input[counter])
					if (model.pieces[col][row] == 1):
						count_own_moves += model.pieces[col][row]
					counter+=1

			if (count_own_moves % 2 == 0):
				is_first_player = True

			model.last_move = (last_move_col, last_move_row)
			ai_shell = StudentAI(1 if is_first_player else 2, model)

			return ai_shell
		else:
			print("unrecognized command", mass_input)
		#otherwise loop back to the top and wait for proper _input.
	return ai_shell

def return_move(move):
	'''
	Prints the move made by the AI so the wrapping shell can input it
	DO NOT MODIFY THIS
	'''
	made_move = "ReturningTheMoveMade";
	#outputs made_move then a space then the row then a space then the column then a line break.
	print(made_move, move[0], move[1])

def check_if_first_player():
	global is_first_player
	return is_first_player

if __name__ == '__main__':
	'''
	DO NOT MODIFY THIS
	'''
	#global deadline

	print ("Make sure this program is ran by the Java shell. It is incomplete on its own. :")
	go = True
	while (go): #do this forever until the make_ai_shell_from_input function ends the process or it is killed by the java wrapper.
		ai_shell = make_ai_shell_from_input()
		moveMade = ai_shell.make_move(model,deadline)
		return_move(moveMade)
		del ai_shell
		sys.stdout.flush()
